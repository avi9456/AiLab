% Define the goal nodes
goal(f).
goal(j).

% Define the transitions
s(a,b).
s(a,c).
s(b,d).
s(b,e).
s(c,f).
s(c,g).
s(d,h).
s(e,i).
s(e,j).

% Solve the problem: Find a path from Node to a goal
solve(Node, Solution) :-
    depthfirst([], Node, Solution).

% Depth-first search
depthfirst(Path, Node, [Node | Path]) :-
    goal(Node).

depthfirst(Path, Node, Sol) :-
    s(Node, Node1),
    \+ member(Node1, Path),
    depthfirst([Node | Path], Node1, Sol).

% Depth-limited search with a maximum depth
depthfirst2(Node, [Node], _) :-
    goal(Node).

depthfirst2(Node, [Node | Sol], Maxdepth) :-
    Maxdepth > 0,
    s(Node, Node1),
    Max1 is Maxdepth - 1,
    depthfirst2(Node1, Sol, Max1).

% Run a query manually
:- initialization(main).
main :-
    solve(a, Solution),
    write('Solution: '), nl,
    write(Solution), nl,
    halt.
